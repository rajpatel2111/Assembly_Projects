.data

     intro: .asciiz "Please input a 1 for an unsigned conversion (2 and 3 do not work), and 0 to quit"
     unsigned:  .asciiz "Please input an unsigned 4 space hex number to convert\n"
     signed:  .asciiz "Please input a signed 4 space hex number to convert\n"
     char_buffer: .byte 0:6  #6 character buffer
     alphabet_buffer: .byte 27  #stores the bytes needed for the array 
     alphabet: .asciiz "abcdefghijklmnopqrstuvwxyz"
     alphaconvertq:  "Please enter a number between 65 and 90: "
     negative: .asciiz "-"
     .text
     
     main:	
     
     	li $t4, 3  #shift counter, need this to see how many bit spaces need to be shifted.
     	li $s0, 0  #Clears s registers
        li $s1, 0  #Clears s registers
     	li $s2, 0  #Clears s registers
     	li $s3, 0  #Clears s registers
     	li $s4, 0  #Clears s registers
     
     	li $v0, 4  #load intro
     	la $a0, intro  #intro
     	syscall
     	
     	li $v0, 5  #get integery input
     	syscall
     	move $a0 $v0     	
     	beq $a0, 1, conversion_u
     	beq $a0, 2, conversion_s
     	
     	beq $a0, 3, alpha
     	beq $a0, $zero, end
conversion_u:
	
	li $v0, 4  #load intro
     	la $a0, unsigned  #intro
     	syscall
     	
     	li $v0, 8 
     	la $a0, char_buffer # load address of input buffer into $a0
     	li $a1, 6  #character limit
	syscall
	move $t0, $a0
           	
u_loop:	
        lb $t1, 0($t0)  #loads the  byte of the memory address of the array
        beq $t1, 10, hex_total  #checks for new line
        
         
        subiu $t1, $t1, 48  #subtracts 48 to find number
	bgt $t1, 9 hex_branch #branches off to hex
	
       	addiu $t0, $t0, 1 #moves the memory address of the array up one
       	beqz $t4 hex_multiplier0
        beq $t4, 1, hex_multiplier1
        beq $t4, 2, hex_multiplier2
        beq $t4, 3, hex_multiplier3
    	
    	
hex_branch:

	subiu $t1, $t1, 7  #subtracts more if this is a letter to get a number
	addiu $t0, $t0, 1
	beqz $t4 hex_multiplier0
        beq $t4, 1, hex_multiplier1
        beq $t4, 2, hex_multiplier2
        beq $t4, 3, hex_multiplier3
	
hex_multiplier0:
	
	add $s0, $s0, $t1
	j hex_total

hex_multiplier1:
	
	sll $s1, $t1, 4
	subiu $t4, $t4, 1
	j u_loop 

hex_multiplier2:
	
	sll $s2, $t1, 8
	subiu $t4, $t4, 1
	j u_loop 
hex_multiplier3:
	
	sll $s3, $t1, 12  #shifts bits by 12 if this is in the fourth spot, 16^3
	subiu $t4, $t4, 1
	j u_loop 
	
hex_total:

	add $s4, $s4, $s0  #adds all hex multipliers
	add $s4, $s4, $s1
	add $s4, $s4, $s2
	add $s4, $s4, $s3
	
	
	
	li $v0, 1
	move $a0, $s4	#prints total
	syscall
	
